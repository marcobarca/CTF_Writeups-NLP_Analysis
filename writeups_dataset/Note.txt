# Overview
After browsing the site for few minutes, I realised that you can inject html code while creating new notes.

# Analysis
The source code was available to download. 
Let's look at what's going on in the backend. 
web.js has all the endpoints and the server is run internally on localhost:8080. 
However the most interesting part is report.js which handles the /report endpoint. 
Let's look at its code.

Couple of things to notice here:
It's a puppeteer bot.
It is a headless, no-sandbox chromium browser (it's infamous of lax security).
The bot creates a new account with completely random username and password. 
Creates a new note with content as process.env.flag i. e the flag. 
The bot in the end opens the url we provide on the /reports page.
The ideal plan would be to read the contents of "My notes" of the bot account which includes the flag. 
I had several ideas like use fetch API to login to a test account and create a note with contents from the bot account but the csrf library used was making it very tricky to do that. 
After some manual testing I figured that you can access internet through the puppeteer bot.
Now this opens a lot of possibilities. 
I can make a get request containing the "My Notes" contents as an argument.

# Attack Execution
So, my plan is simple. I will create an account on main servers with credentials a:a.
Then, I will created a script that will access webhook.site url with body contents of a particular window named "pwn" (This will be created later). Let's have a look at the script.

I added a clause to check for ?pwn in the url because without it the website was crashing since it was redirecting every time you accessed notes. Now, let's go ahead and plant it.

Now, it is time for the main script. 
The one that goes into the /report page, into the url field.
Here I want to do three things inside puppeteer in a sequence. 
Open a new window named "pwn" with url http://localhost/notes. 
This will open the "My notes" page as bot account. Which has the flag.
Login in to our test account with credentials a:a.
Go to /notes?pwn after logging in which will capture the contents of "pwn" window automatically due to xss.
That's it. That should do it. Now let's have a look at the code. 

Chrome tells that the contents are html. 
Next, we create a form with action as the local login page and pre-enter the credentials as values in the input fields. 
Next we execute our sequence inside a script tag. 
We open a window named "pwn" with notes url (This has our flag in body). 
Then we wait 1 second and submit our login form. 
After we are logged in as "a:a" we then open /notes?pwn after 1.5 seconds which will trigger our XSS and steal the contents from the "pwn" tag which still has body from the bot account (and the flag).
We'll go ahead and first get this script in one line and then enter it into the "url" section of /report.
Now we wait for 2.5 seconds and we get the flag!