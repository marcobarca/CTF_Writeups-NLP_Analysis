# Overview

I analyzed the server.py reference code. The highlighted code below has great importance.

# Analysis

I found that if you entered a cookie name given in the cookie name list (view line 7 in the server.py code), you will go into the first if statement but completely miss the nested if.
From this, it is clear we need to become admin to swipe that flag!

Let's visit the given site.
Use our old friend inspect > Application > Storage > Cookies
From there, we see a cookie named session.

You can view more information here for the details of each cookie value segment.
Let's go to https://jwt.io/ to decode that cookie value ... we observe that the header is { "very_auth": "blank" }
Yikes. We want to be "admin" instead of "blank"

Another thing to point out on that site is that there is a "verify signature" section. Since flask cookies involve encryption, there is a secret key set to protect against attackers.
The app’s secret key is used to sign a flask session cookie so that it cannot be modified. However, since we know the secret key is one of the 28 cookie names, we can simply try them all until we successfully decrypt the cookie.

# Attack Execution

We can write a script that uses the logic from Flask’s SecureCookieSessionInterface to decode and encode cookies.
Running the solve script will try each secret key and then once it successfully fins the key by decoding a know cookie, it will encode the above cookie data.
We can replace the cookie on the website with our admin cookie, refresh the page, and the flag will be shown.
