# Overview
Another instance challenge, which again makes me so inconvenience to debug and investigate, so I create a docker images for this challenge and host it locally. I also upload the Dockerfile at my github repo.

# Analysis
The code is nearly 300 lines... There is a login function, follow and unfollow function, and our target is making admin follow us.
The source code does not contains any snippet of code that stored the credentials of admin user. 
Thought that the code could be hidden, or unprovided, I try to follow admin, but the application response "user does not exist". How strange it could be!
So... there is no admin account. Then just create an admin account, then follow other account. However, we can create an admin account, as the username must be at least 6 characters.
At this point, I got stuck. I found no entry point in code that we can input to edit followers data.
After reading the write up from the others, I found that I misunderstood a snippet of code.

Put it on prettier.io to see how this snippet of code actually look like. 
It completely change everything. Beforehand, body.u, body.r and body.n seems to be the return value of map function, turns out to be index of a users' followers array. 
The comma is now become the command operator.

Let's take a small demo to understand comma operator behavior in array index. 
Assume that arr = followers.get(req.username), the following code snippet will help us understand the behavior of comamnd operator.
There are 2 things to notice from the results we get:
We can assign the javascript array at any index. There is no line of code assign value for arr[0], but the js code still run without any error!
In case there is comma operator in array index, only the last index get the assigned value, and other get undefined.
At this point, you might think that: "Alright, now I can just assign admin to the first index, then I can succesfully get the flag. My payload will be [body.u, body.r, body.n] = ["admin", "", 1]. 
Unfortunately, this payload will not work because the inserted value is an array, not a string that we want.

The remaining problem is that by somehow, there is an element in followers array is value type of string, not array.

This magic will completely solve the remaining problems. Talking about __proto__ is long, so I will not do it at this write up. 
Let's examine the following snippet of code to understand the behavior of array __proto__.
There are 2 things to notice from the results we get:
Although there is no line of code assign value for arr1[0], the output of arr1 show that arr1[0]="1". This happens similar to arr2.
The filled up missing value is the same as the value we assigned to arr1["__proto__"] or arr2["__proto__"], sequentially.
Gotcha! At this point, we can finally solve the challenge, as we finally fill up the missing value with a controlled value and type, no matter what data is inserted in later!. Let's check it out!

# Attack Execution
To solve this challenge, I use 4 requets.
The first request just to login, and get the session
The second request is fill up the value of __proto__ of the followers array.
The third request is to fill up the followers array at index 1, so that the index 0 of followers array will be automatically filled up by the value the value of __proto__ of that array.
And the final request is to get the flag!