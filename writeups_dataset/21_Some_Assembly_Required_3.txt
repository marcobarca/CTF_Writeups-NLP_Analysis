# Overview

Upon visiting the website, it appears to just be a textbox with a form. 

# Analysis

After inspecting the website, you can see there's a G82XCw5CX3.js file. I visited mercury.picoctf.net:55336/JIFxzHyW8W which consisted of this.

The first time I looked at it I gave up in 5 seconds. Anyways, in the const declaration one of the elements caught my attention. './JIFxzHyW8W' is a path.

I visited mercury.picoctf.net:55336/JIFxzHyW8W and it gave a WebAssembly file.

I translate the wasm file to wat and analyze the result.

Now I translate to pseudo-code and analyze the result.

We can see that check_flag stayed pretty much the same as last time, so we can assume that the magic happens in copy. If we diff it against the original implementation (which simply stored the provided flag characters in memory without any extra manipulation) we can see that this version includes some extra logic:

Notice that e[2] comes from b which is the index of the character, and e[3] comes from a which is a user input character. We can also see that this implementation is using an extra array defined at offset 1067+:

# Attack Execution

Translating this logic to Python, we get:
Now we can add the array defined at 1024+ and brute force the flag.
