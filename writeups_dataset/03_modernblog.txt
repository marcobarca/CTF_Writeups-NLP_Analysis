# Overview

Look at the Admin Bot, we can definitely that this is client-side challenge. The source is React + Express backend, and most of the code is used for credentials management, and content management (creating, view blog content). The point is there are blog of admin containing the flag, with a randomId.

Since we can view any post given the id known (or the access link), the point is to get the flagId, or admin account takeover. And, as I state, this is a client-side challenge, so we have to take a look at the client side code to see where the vulnerability occurs: it is the body of a post

Let's move to the analysis phase to see how could we exploit this spot

# Analysis

The first thing I can think of is XSS to account take over. However, as the comment says, there is CSP set at server.

According to the CSP, there is no room for our custom script to run on the website, which means the account takeover approach is impossible.

At this point, there is only 1 option left: get the flagId of the admin post, which is in /home page of admin user!

However, it does not directly HTML encode special characters, so we still can inject markup, HTML, CSS. But what we can do with this? What about CSS Injection / XS-leak? We can inject CSS into the post body, but it will execute on post page, while the flagId is in the /home page. So, what else we can do with HTML and CSS?

Just hold down a little bit. Although we can't execute our custom script, is that means we have no control over JS execution of the web? The answer is NO! We can do that with DOM clobbering attack.

DOM clobbering is a well-known attack to change a value of window properties. For example:

However, reading the author writeup, I now know that DOM clobbering is only able to the the value of window properties, but also document properties! The key point is here

So, the first point tells us that for any exposed embed, form, iframe, img, or exposed object element, the value of the “name” attribute will be a property of the Document object.

Okay, but how to use this technique to solve the modernblog challenge? To use this, we need to answer a critical question:

What property needed to be changed in order to change behavior of the modernblog web app?

To figure out that property, we need to understand the how the web app works in depth. And, it will lead us to me to React Router!


At the main.jsx file, we can see this application is route using the BrowserRouter. It actually a single page application, and it will choose which page to render based the path property.

Take a look at BrowserRouter doc, there is a line worth noticing

<BrowserRouter window> defaults to using the current document's defaultView, but it may also be used to track changes to another window's URL, in an <iframe>

That is, document.defaultView, right?

The doc also state that BrowserRouter "browse using the built-in history stack", so taking a look at the History API can help us confirm whether document.defaultView is what we are looking for. And it is!


At this point, we know that the key point of this challenge is the document.defaultView property. Let's test DOM clobbering payload at the modernblog website whether it work or not.


Isn't that magic. It clobbered! With that, we can now open the /home page, and perform CSS Injection to leak the flagId!

But, how to make the createBrowserHistory run again? If not so, there is no /home page loaded, hence no bit leaked.


The createBrowserHistory only run when the application load, but we can't make the modernblog web reload. Even if we could do, we would not like to do this as our payload will go!

That go to a super cool idea of this challenge: create a React app inside a React app


# Attack Execution
We can use the srcdoc attribute of the iframe tag to create another React app, using the provided public JS file. Let's try it:


We get an error, as it fails to change document.defaultview.History while it is currently pointing to the current window int about:srcdoc. But, if we combine if React gadget, we got the following:


# Analysis

The text color is red, and the content is exactly of the /home page. We finally reach the point! Load the /home page, inject CSS to leak the flagId bit by bit to get the flag!!!!!!!!!


# Attack Execution

Based on the above analysis, we now can use classical CSS techniques to leak the flagId. Using the script generated by the python code below, then create a blog whose body of it, and get each character of flagId at webhook:

Attempt 12 times to get the full flagId, and the flag!
