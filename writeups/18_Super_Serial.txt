# Overview

Going to robots.txt shows that admin.phps is disallowed. This indicates that the phps extension is enabled within the php configuration for this webserver. Files with the phps extension contain php code but instead of running when they are accessed, they return an HTML representation of the literal php code.

# Analysis

We can access index.phps to find the following:

The above php code points us in the direction of authentication.php. Looking at authentication.phps shows the following:

The above php code points us in the direction of cookie.php. Looking at cookie.phps shows the following:

Finally, the require_once() includes the cookie.php file. Let's view the source code:

OK. A few things to note here. The cookie.php file is included in every page. The following code segment will deserialize our cookie and print the object when an error occurs. ("Deserialization error. ".$perm)

Conveniently, the access_log class in authentication.php has the following __toString() method:

__toString is one of the PHP magic methods that override PHP's default behaviour. This method is called when the object is converted to a string. So if we could get the above $perm variable to be our custom access_log object, we could achieve arbitrary file read on the target system.

# Attack Execution

To do this, we simply serialize our custom access_log object, where we set log_file to ../flag.
This can be done with the following script:

Now, we add TzoxMDoiYWNjZXNzX2xvZyI6MTp7czo4OiJsb2dfZmlsZSI7czo3OiIuLi9mbGFnIjt9 as the login cookie on our browser and go to authentication.php. Note that we need to use authentication.php because that is the file where the required access_log class is defined.

Now back to this code:

Our custom access_log('../flag') object will be deserialized into $perm.
This will most definitely generate an error because the access_log class has no such methods.

This will catch the error and concatenate $perm to the "Deserialization error. " string. In doing so, $perm is converted to a string. This invokes the __toString() method which reads ../flag!

The flag will be printed on our browser.
